<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Attest.Testing.NUnit</name>
    </assembly>
    <members>
        <member name="T:Attest.Testing.NUnit.EndToEndTestsBase">
            <summary>
            Base class for all End-To-End tests that use NUnit as test framework provider.
            </summary>    
        </member>
        <member name="M:Attest.Testing.NUnit.EndToEndTestsBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Testing.NUnit.EndToEndTestsBase"/> class.
            </summary>        
        </member>
        <member name="M:Attest.Testing.NUnit.EndToEndTestsBase.Setup">
            <summary>
            Override this method to implement custom test setup logic.
            </summary>
        </member>
        <member name="M:Attest.Testing.NUnit.EndToEndTestsBase.TearDown">
            <summary>
            Override this method to implement custom test teardown logic.
            </summary>
        </member>
        <member name="M:Attest.Testing.NUnit.EndToEndTestsBase.SetupOverride">
            <summary>
            Provides additional opportunity to modify the test setup logic.
            </summary>
        </member>
        <member name="M:Attest.Testing.NUnit.EndToEndTestsBase.OnBeforeTeardown">
            <summary>
            Override to inject custom logic before the teardown starts.
            </summary>
        </member>
        <member name="M:Attest.Testing.NUnit.EndToEndTestsBase.OnAfterTeardown">
            <summary>
            Override to inject custom logic after the teardown finishes.
            </summary>
        </member>
        <member name="T:Attest.Testing.NUnit.IntegrationTestsBase`2">
            <summary>
            Base class for all integration-tests fixtures that involve ioc container adapter 
            and test bootstrapper and use NUnit as test framework provider.
            </summary>
            <typeparam name="TRootObject">The type of root object, from which the test's flow starts.</typeparam>
            <typeparam name="TBootstrapper">The type of bootstrapper.</typeparam>
        </member>
        <member name="M:Attest.Testing.NUnit.IntegrationTestsBase`2.#ctor(Attest.Testing.Core.InitializationParametersResolutionStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Testing.NUnit.IntegrationTestsBase`2"/> class.
            </summary>
            <param name="resolutionStyle">The resolution style.</param>
        </member>
        <member name="M:Attest.Testing.NUnit.IntegrationTestsBase`2.Setup">
            <summary>
            Override this method to implement custom test setup logic.
            </summary>
        </member>
        <member name="M:Attest.Testing.NUnit.IntegrationTestsBase`2.TearDown">
            <summary>
            Override this method to implement custom test teardown logic.
            </summary>
        </member>
        <member name="M:Attest.Testing.NUnit.IntegrationTestsBase`2.SetupOverride">
            <summary>
            Provides additional opportunity to modify the test setup logic.
            </summary>
        </member>
        <member name="M:Attest.Testing.NUnit.IntegrationTestsBase`2.OnBeforeTeardown">
            <summary>
            Override to inject custom logic before the teardown starts.
            </summary>
        </member>
        <member name="M:Attest.Testing.NUnit.IntegrationTestsBase`2.OnAfterTeardown">
            <summary>
            Override to inject custom logic after the teardown finishes.
            </summary>
        </member>
        <member name="T:Attest.Testing.NUnit.IntegrationTestsBase`4">
            <summary>
            Base class for all integration-tests fixtures that involve ioc container, its adapter, and test bootstrapper
            and use NUnit as test framework provider.
            </summary>
            <typeparam name="TContainer">The type of ioc container.</typeparam>
            <typeparam name="TContainerAdapter">The type of ioc container adapter.</typeparam>
            <typeparam name="TRootObject">The type of root object, from which the test's flow starts.</typeparam>
            <typeparam name="TBootstrapper">The type of bootstrapper.</typeparam>
        </member>
        <member name="M:Attest.Testing.NUnit.IntegrationTestsBase`4.#ctor(Attest.Testing.Core.InitializationParametersResolutionStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Testing.NUnit.IntegrationTestsBase`2"/> class.
            </summary>
            <param name="resolutionStyle">The resolution style.</param>
        </member>
        <member name="M:Attest.Testing.NUnit.IntegrationTestsBase`4.Setup">
            <summary>
            Override this method to implement custom test setup logic.
            </summary>
        </member>
        <member name="M:Attest.Testing.NUnit.IntegrationTestsBase`4.TearDown">
            <summary>
            Override this method to implement custom test teardown logic.
            </summary>
        </member>
        <member name="M:Attest.Testing.NUnit.IntegrationTestsBase`4.SetupOverride">
            <summary>
            Provides additional opportunity to modify the test setup logic.
            </summary>
        </member>
        <member name="M:Attest.Testing.NUnit.IntegrationTestsBase`4.CreateAdapter(`0)">
            <summary>
            Override to provide ioc container adapter creation logic.
            </summary>
            <param name="container">The ioc container.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Testing.NUnit.IntegrationTestsBase`4.OnBeforeTeardown">
            <summary>
            Override to inject custom logic before the teardown starts.
            </summary>
        </member>
        <member name="M:Attest.Testing.NUnit.IntegrationTestsBase`4.OnAfterTeardown">
            <summary>
            Override to inject custom logic after the teardown finishes.
            </summary>
        </member>
        <member name="T:Attest.Testing.NUnit.StepsBase">
            <summary>
            Base class for step-containing classes, used for [Given] steps.
            </summary>
        </member>
        <member name="M:Attest.Testing.NUnit.StepsBase.RegisterInstance``1(``0)">
            <summary>
            Registers service instance into the scenario context.
            </summary>
            <typeparam name="TService">The type of service.</typeparam>
            <param name="instance">The instance to be registered.</param>
        </member>
        <member name="M:Attest.Testing.NUnit.StepsBase.RegisterTransient``2">
            <summary>
            Registers the service and its implementation types in a transient manner.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
        </member>
        <member name="M:Attest.Testing.NUnit.StepsBase.RegisterBuilder``1(Attest.Fake.Builders.FakeBuilderBase{``0})">
            <summary>
            Builds service from its builder and registers it into the ioc container.
            </summary>
            <typeparam name="TService">The type of service.</typeparam>
            <param name="builder">The builder to be registered.</param>
        </member>
        <member name="M:Attest.Testing.NUnit.StepsBase.RegisterFake``1(Attest.Fake.Core.IFake{``0})">
            <summary>
            Registers service fake into the scenario context.
            </summary>
            <typeparam name="TService">The type of service.</typeparam>
            <param name="fake">The fake to be registered.</param>
        </member>
        <member name="M:Attest.Testing.NUnit.StepsBase.RegisterMock``1(Attest.Fake.Core.IMock{``0})">
            <summary>
            Registers service mock into the scenario context.
            </summary>
            <typeparam name="TService">The type of service.</typeparam>
            <param name="fake">The mock to be registered.</param>
        </member>
        <member name="M:Attest.Testing.NUnit.StepsBase.GetStepsProvider``1">
            <summary>
            Resolves steps provider by type.
            </summary>
            <typeparam name="TStepsProvider">The type of steps provider.</typeparam>
            <returns>The steps provider.</returns>
        </member>
    </members>
</doc>
